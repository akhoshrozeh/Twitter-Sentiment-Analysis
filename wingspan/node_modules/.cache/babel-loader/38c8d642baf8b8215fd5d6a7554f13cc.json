{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\estee\\\\Documents\\\\Petstagram\\\\src\\\\comment_reaction.js\";\nimport React, { Component } from 'react';\nimport \"./comment_reaction.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Comment(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"comment_post\",\n    style: {\n      visibility: 'visible'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"picture2\",\n      width: \"30\",\n      height: \"30\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"name2\",\n      children: props.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), props.text]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Comment;\n\nclass Comment_Reaction extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: this.props.post,\n      comment: '',\n      temp_comment: 'wow super cool!',\n      style: 'visible',\n      self: {\n        search: ''\n      }\n    };\n    this.handleCommentChange = this.handleCommentChange.bind(this);\n  } // retrieve post information\n\n  /*retrievePost() {\r\n      const postID = this.props.post.text;\r\n      fetch(`http://localhost:3001/posts/${postID}`)\r\n          .then(res => res.json())\r\n          .then(res => this.setState({post: res}))\r\n  }\r\n    componentDidMount() {\r\n      this.retrievePost();\r\n  }*/\n\n\n  retrieveSelf() {\n    fetch(\"http://localhost:3001/self\").then(response => response.json()).then(response => this.setState({\n      self: response\n    }));\n  }\n\n  componentDidMount() {\n    this.retrieveSelf();\n  }\n\n  handleCommentChange(e) {\n    this.setState({\n      comment: e.target.value\n    });\n  }\n\n  addNewComment() {\n    fetch('http://localhost:3001/posts', {\n      method: 'PATCH',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        postID: this.state.post.text,\n        comment: {\n          search: this.state.self.search,\n          text: this.state.comment\n        }\n      })\n    });\n  } // also patch post information to add thumbs up, heart, laugh, comments\n\n  /*handleLike(e) {\r\n      this.patchPost(likes, this.state.post.likes + 1)\r\n      fetch('http://localhost:3001/posts', {\r\n          method: 'PATCH',\r\n          headers: {\r\n  'Content-Type': 'application/json'\r\n  },\r\n  body: {likes: this.state.post.likes}\r\n      })\r\n  }\r\n    handleHeart(e) {\r\n      this.setState({hearts: this.state.post.hearts + 1});\r\n  }\r\n    handleLaughs(e) {\r\n      this.setState({laughs: this.state.post.laughs + 1});\r\n  }*/\n\n\n  render() {\n    if (this.props.noComments) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"metacontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"picture\",\n          width: \"60\",\n          height: \"60\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"name\",\n          children: this.props.post.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"sample\",\n          children: this.props.post.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"metacontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"picture\",\n          width: \"60\",\n          height: \"60\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"name\",\n          children: this.props.post.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"sample\",\n          children: this.props.post.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.props.post.comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n            username: comment.search,\n            text: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type here...\",\n            value: this.state.comment,\n            onChange: this.handleCommentChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"reset\",\n            id: \"send\",\n            onClick: () => this.addNewComment()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Comment_Reaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["C:/Users/estee/Documents/Petstagram/src/comment_reaction.js"],"names":["React","Component","ReactDOM","Comment","props","visibility","username","text","Comment_Reaction","constructor","state","post","comment","temp_comment","style","self","search","handleCommentChange","bind","retrieveSelf","fetch","then","response","json","setState","componentDidMount","e","target","value","addNewComment","method","mode","headers","body","JSON","stringify","postID","render","noComments","comments","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP;AACA,OAAO,kCAAP;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,sBACI;AAAK,IAAA,KAAK,EAAC,cAAX;AAA2B,IAAA,KAAK,EAAE;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAlC;AAAA,4BACI;AAAK,MAAA,KAAK,EAAC,UAAX;AAAsB,MAAA,KAAK,EAAC,IAA5B;AAAiC,MAAA,MAAM,EAAC,IAAxC;AAA6C,MAAA,GAAG,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,gBAAoBD,KAAK,CAACE;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKF,KAAK,CAACG,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KARQJ,O;;AAUT,MAAMK,gBAAN,SAA+BR,KAAK,CAACC,SAArC,CAA+C;AAE3CQ,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KAAKP,KAAL,CAAWO,IADR;AAETC,MAAAA,OAAO,EAAE,EAFA;AAGTC,MAAAA,YAAY,EAAE,iBAHL;AAITC,MAAAA,KAAK,EAAE,SAJE;AAKTC,MAAAA,IAAI,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT;AALG,KAAb;AAOA,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;AACH,GAZ0C,CAc3C;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGIC,EAAAA,YAAY,GAAG;AACXC,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECC,QAAQ,IAAI,KAAKE,QAAL,CAAc;AAAET,MAAAA,IAAI,EAAEO;AAAR,KAAd,CAFb;AAGH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,YAAL;AACH;;AAEDF,EAAAA,mBAAmB,CAACS,CAAD,EAAI;AACnB,SAAKF,QAAL,CAAc;AAACZ,MAAAA,OAAO,EAAEc,CAAC,CAACC,MAAF,CAASC;AAAnB,KAAd;AAEH;;AAEDC,EAAAA,aAAa,GAAG;AACfT,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AAC9BU,MAAAA,MAAM,EAAE,OADsB;AAE9BC,MAAAA,IAAI,EAAE,MAFwB;AAG9BC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAHqB;AAM9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,MAAM,EAAE,KAAK1B,KAAL,CAAWC,IAAX,CAAgBJ,IAAzB;AAA+BK,QAAAA,OAAO,EAAE;AAACI,UAAAA,MAAM,EAAE,KAAKN,KAAL,CAAWK,IAAX,CAAgBC,MAAzB;AAAiCT,UAAAA,IAAI,EAAE,KAAKG,KAAL,CAAWE;AAAlD;AAAxC,OAAf;AANwB,KAAhC,CAAL;AAQA,GAlD0C,CAoD3C;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOIyB,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKjC,KAAL,CAAWkC,UAAf,EAA2B;AACvB,0BACI;AAAK,QAAA,KAAK,EAAC,eAAX;AAAA,gCACI;AAAK,UAAA,KAAK,EAAC,SAAX;AAAqB,UAAA,KAAK,EAAC,IAA3B;AAAgC,UAAA,MAAM,EAAC,IAAvC;AAA4C,UAAA,GAAG,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,KAAK,EAAC,MAAX;AAAA,oBAAmB,KAAKlC,KAAL,CAAWO,IAAX,CAAgBK;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAK,UAAA,KAAK,EAAC,QAAX;AAAA,oBAAqB,KAAKZ,KAAL,CAAWO,IAAX,CAAgBJ;AAArC;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KARD,MASK;AACD,0BACI;AAAK,QAAA,KAAK,EAAC,eAAX;AAAA,gCACI;AAAK,UAAA,KAAK,EAAC,SAAX;AAAqB,UAAA,KAAK,EAAC,IAA3B;AAAgC,UAAA,MAAM,EAAC,IAAvC;AAA4C,UAAA,GAAG,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,KAAK,EAAC,MAAX;AAAA,oBAAmB,KAAKH,KAAL,CAAWO,IAAX,CAAgBK;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAK,UAAA,KAAK,EAAC,QAAX;AAAA,oBAAqB,KAAKZ,KAAL,CAAWO,IAAX,CAAgBJ;AAArC;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAgBI;AAAA,oBACK,KAAKH,KAAL,CAAWO,IAAX,CAAgB4B,QAAhB,CAAyBC,GAAzB,CACG5B,OAAO,iBAAK,QAAC,OAAD;AAAS,YAAA,QAAQ,EAAEA,OAAO,CAACI,MAA3B;AAAmC,YAAA,IAAI,EAAEJ,OAAO,CAACL;AAAjD;AAAA;AAAA;AAAA;AAAA,kBADf;AADL;AAAA;AAAA;AAAA;AAAA,gBAhBJ,eAqBI;AAAK,UAAA,KAAK,EAAC,WAAX;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,WAAW,EAAE,cAAhC;AAA+C,YAAA,KAAK,EAAE,KAAKG,KAAL,CAAWE,OAAjE;AAA0E,YAAA,QAAQ,EAAE,KAAKK;AAAzF;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,IAAI,EAAC,OAAb;AAAqB,YAAA,EAAE,EAAC,MAAxB;AAA8B,YAAA,OAAO,EAAE,MAAM,KAAKY,aAAL;AAA7C;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AA4BH;AAEJ;;AArH0C;;AAuH/C,eAAerB,gBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./comment_reaction.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction Comment(props) {\r\n    return(\r\n        <div class=\"comment_post\"  style={{visibility: 'visible'}} >\r\n            <img class=\"picture2\" width=\"30\" height=\"30\" alt=\"\" />\r\n            <div class=\"name2\">{props.username}</div>\r\n            {props.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Comment_Reaction extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: this.props.post,\r\n            comment: '',\r\n            temp_comment: 'wow super cool!',\r\n            style: 'visible',\r\n            self: {search: ''},\r\n        }\r\n        this.handleCommentChange = this.handleCommentChange.bind(this);\r\n    }\r\n\r\n    // retrieve post information\r\n    /*retrievePost() {\r\n        const postID = this.props.post.text;\r\n        fetch(`http://localhost:3001/posts/${postID}`)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({post: res}))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrievePost();\r\n    }*/\r\n\r\n    retrieveSelf() {\r\n        fetch(\"http://localhost:3001/self\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => this.setState({ self: response }))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrieveSelf();\r\n    }\r\n\r\n    handleCommentChange(e) {\r\n        this.setState({comment: e.target.value});\r\n\r\n    }\r\n\r\n    addNewComment() {\r\n    \tfetch('http://localhost:3001/posts', {\r\n            method: 'PATCH',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({postID: this.state.post.text, comment: {search: this.state.self.search, text: this.state.comment}})\r\n        })\r\n    }\r\n\r\n    // also patch post information to add thumbs up, heart, laugh, comments\r\n\r\n    /*handleLike(e) {\r\n        this.patchPost(likes, this.state.post.likes + 1)\r\n        fetch('http://localhost:3001/posts', {\r\n            method: 'PATCH',\r\n            headers: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: {likes: this.state.post.likes}\r\n        })\r\n    }\r\n\r\n    handleHeart(e) {\r\n        this.setState({hearts: this.state.post.hearts + 1});\r\n    }\r\n\r\n    handleLaughs(e) {\r\n        this.setState({laughs: this.state.post.laughs + 1});\r\n    }*/\r\n    \r\n\r\n    \r\n\r\n    render() {\r\n        if (this.props.noComments) {\r\n            return (\r\n                <div class='metacontainer'>\r\n                    <img class=\"picture\" width=\"60\" height=\"60\" alt=\"\" />\r\n                    <div class=\"name\">{this.props.post.search}</div>\r\n                    <div class=\"sample\">{this.props.post.text}</div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div class='metacontainer'>\r\n                    <img class=\"picture\" width=\"60\" height=\"60\" alt=\"\" />\r\n                    <div class=\"name\">{this.props.post.search}</div>\r\n                    <div class=\"sample\">{this.props.post.text}</div>\r\n    \r\n    \r\n                    {/*<div class=\"comment_post\"  style={{visibility: this.state.style}} >\r\n                      <img class=\"picture2\" width=\"30\" height=\"30\" alt=\"\" />\r\n                      <div class=\"name2\">{this.props.post.username}</div>\r\n                      {this.state.temp_comment}\r\n                      </div>\r\n                    <div class=\"comment_post\"  style={{visibility: this.state.style}} >\r\n                      <img class=\"picture2\" width=\"30\" height=\"30\" alt=\"\" />\r\n                      <div class=\"name2\">{this.props.post.username}</div>\r\n                      {this.state.temp_comment}\r\n                    </div>*/}\r\n                    <div>\r\n                        {this.props.post.comments.map(\r\n                            comment => (<Comment username={comment.search} text={comment.text}></Comment>)\r\n                            )}\r\n                    </div>\r\n                    <div class='container'>\r\n                        <input type=\"text\" placeholder= 'Type here...' value={this.state.comment} onChange={this.handleCommentChange}/>\r\n                        <button type=\"reset\" id='send'onClick={() => this.addNewComment()}></button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\nexport default Comment_Reaction;\r\n"]},"metadata":{},"sourceType":"module"}