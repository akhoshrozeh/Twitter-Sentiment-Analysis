{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\estee\\\\Documents\\\\Petstagram\\\\src\\\\post.js\";\nimport React, { Component } from 'react';\nimport \"./post.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      self: {\n        username: ''\n      },\n      curPost: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  retrieveSelf() {\n    fetch(\"http://localhost:3001/self\").then(response => response.json()).then(response => this.setState({\n      self: response\n    }));\n  }\n\n  componentDidMount() {\n    this.retrieveSelf();\n  }\n\n  handleChange(e) {\n    this.setState({\n      text: e.target.value\n    });\n  } // keep an array of users who liked it?\n\n\n  addNewPost() {\n    var text = {\n      text: this.state.text,\n      username: this.state.self.username,\n      numLikes: 0,\n      numHearts: 0,\n      numLaughs: 0,\n      comments: [],\n      time: Date().toLocaleString()\n    };\n    fetch(\"http://localhost:3001/posts\", {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(text)\n    }).then(res => res.json());\n    /*.then(res => fetch(\"http://localhost:3001/profiles\", {\r\n        method: 'PATCH',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({username: this.state.self.username, post: res})\r\n    }))*/\n    //console.log(text);\n    // update posts of self too\n\n    fetch(\"http://localhost:3001/profiles\", {\n      method: 'PATCH',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.self.username,\n        post: text\n      })\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        class: \"picture\",\n        width: \"60\",\n        height: \"60\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"name\",\n        children: this.state.self.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"text\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"comment2\",\n            class: \"comment2\",\n            placeholder: \"Make a post!\",\n            value: this.state.text,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"button\",\n            onClick: () => this.addNewPost(),\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/estee/Documents/Petstagram/src/post.js"],"names":["React","Component","ReactDOM","Post","constructor","props","state","text","self","username","curPost","handleChange","bind","retrieveSelf","fetch","then","response","json","setState","componentDidMount","e","target","value","addNewPost","numLikes","numHearts","numLaughs","comments","time","Date","toLocaleString","method","mode","headers","body","JSON","stringify","res","post","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./post.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\ttext: '',\r\n            self: {username: ''},\r\n            curPost: {},\r\n\t\t};\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\r\n    retrieveSelf() {\r\n        fetch(\"http://localhost:3001/self\")\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => this.setState({ self: response }))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrieveSelf();\r\n    }\r\n\r\n\thandleChange(e) {\r\n\t\tthis.setState({text: e.target.value})\r\n\t}\r\n    \r\n    // keep an array of users who liked it?\r\n\r\n\taddNewPost() {\r\n\t\tvar text = {\r\n\t\t\ttext: this.state.text,\r\n            username: this.state.self.username,\r\n            numLikes: 0,\r\n            numHearts: 0,\r\n            numLaughs: 0,\r\n            comments: [],\r\n            time: Date().toLocaleString(),\r\n\t\t}\r\n\t\tfetch(\"http://localhost:3001/posts\", {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tmode: 'cors',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(text)\r\n\t\t})\r\n            .then(res => res.json())\r\n            /*.then(res => fetch(\"http://localhost:3001/profiles\", {\r\n                method: 'PATCH',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({username: this.state.self.username, post: res})\r\n            }))*/\r\n        //console.log(text);\r\n        \r\n        // update posts of self too\r\n        fetch(\"http://localhost:3001/profiles\", {\r\n            method: 'PATCH',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({username: this.state.self.username, post: text})\r\n        })\r\n\t}\r\n\r\n    render() {\r\n        return (\r\n            <div class='post'>\r\n            \t<img class=\"picture\" width=\"60\" height=\"60\" alt=\"\" />\r\n            \t<div class=\"name\">{this.state.self.username}</div>\r\n            \t<div class='text'>\r\n                    <form>\r\n                            <input type=\"comment2\" class=\"comment2\" placeholder= 'Make a post!' value={this.state.text} onChange={this.handleChange}/>\r\n                            <button id='button' onClick={() => this.addNewPost()}>Post</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}